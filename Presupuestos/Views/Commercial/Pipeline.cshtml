@model Presupuestos.ViewModels.MainViewModel
@using PagedList
@using PagedList.Mvc
@using Presupuestos.ViewModels

@{
    ViewBag.Title = "Pipeline de abastecimiento";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section id="data-nav" class="BlackText">
<h2>Pipeline de abastecimiento Comercial - Sesión #@Model.documentNumber</h2>
    <!--Searching result labels-->

        @using (Html.BeginForm("Pipeline", "Commercial", FormMethod.Get))
        {
            <div class="form-inline">
                <label>Ejecutivo</label>
                @Html.DropDownListFor(model => model.executive, new SelectList(Model.executiveDropDown, "Value", "Key"), "Todos",
                new { @class = "form-control" })
                <input type="submit" class="btn btn-primary" value="Buscar" />
            </div>
        }

<!--Each message element using BootStrap-->
@if (Model != null)
{
    if (Model.MessageType.Count != 0)
    {
        string value = "out";
        if (Model.MessageType.TryGetValue("Error", out value))
        {
            <div class="alert alert-dismissible alert-danger">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                <strong>!Error!</strong> @Model.MessageType["Error"]
            </div>
        }
    }
}
</section>
<hr />
<section id="table" class="BlackText">
    <div class="table-responsive">
        <table class="detail-table">
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Projection.Cliente)</th>
                    <th>@Html.DisplayNameFor(model => model.Projection.Presupuesto)</th>
                    <th>@Html.DisplayNameFor(model => model.Projection.Producto)</th>
                    <th>@Html.DisplayNameFor(model => model.Projection.NumOrdem)</th>
                    <th>@Html.DisplayNameFor(model => model.Projection.Sustrato)</th>
                    <th>@Html.DisplayNameFor(model => model.Projection.ItemCodeSustrato)</th>
                    <th>@Html.DisplayNameFor(model => model.Projection.ProbVenta)</th>
                    <th>Consumos/Proyecciones</th>
                    <th>Kilos</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Projections != null)
                {
                    foreach (var clientes in Model.Projections)
                    {
                        <tr class="highlight-row">
                            <th scope="row" rowspan="@(clientes.rowspan)" style="width:30px">
                                @Html.DisplayFor(model => clientes.client)
                                <!--Nombre del cliente-->
                            </th>
                        </tr>
                        <!--Inside a foreach-->
                        foreach (var cliente in clientes.sales)
                        {
                            <tr class="highlight-row">
                                <td style="width:7%">
                                    @Html.DisplayFor(p => cliente.Presupuesto)
                                </td>
                                <td style="width:12%">@Html.DisplayFor(p => cliente.Producto)</td>
                                <td style="width:7%">@Html.DisplayFor(p => cliente.NumOrdem)</td>
                                <td style="width:12%">@Html.DisplayFor(p => cliente.Sustrato)</td>
                                <td>@Html.DisplayFor(p => cliente.ItemCodeSustrato)</td>
                                <td style="width:8%">@Html.DisplayFor(p => cliente.ProbVenta)%</td>
                                <td>
                                    @if (cliente.Month != null)
                                    {
                                        <ul>
                                            @foreach (var item in cliente.Month)
                                            {

                                                <li>| <strong>@item.monthName:</strong> <i>@Html.DisplayFor(p => item.value)</i> </li>
                                            }
                                        </ul>
                                    }
                                </td>
                                <td>@Html.DisplayFor(p => cliente.kg)</td>
                            </tr>
                        }
                        <!--Table holding the total of values-->
                        <tr class="sum-row">
                            <td colspan="5">Suma de @Html.DisplayFor(model => clientes.client)</td>
                            <td></td>
                            <td></td>
                            <td>@Html.DisplayFor(model => clientes.totals.cantidad)</td>
                            <td>@Html.DisplayFor(model => clientes.totals.kg)</td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="8">Fin de la lista</td>
                </tr>
            </tfoot>
        </table>
    </div>
</section>

<section class="text-center">
    <a href="#Top" class="btn btn-info">Volver al inicio</a>
</section>


<!--
        <hr />

        <div> 
            <span class="BlackText">
                Página (Model.PagingMetaData.PageCount < Model.PagingMetaData.PageNumber ? 0 : Model.PagingMetaData.PageNumber) 
                de Model.PagingMetaData.PageCount
            </span>
            Html.PagedListPager(new StaticPagedList<ProjectionViewModel>(Model.Projections, Model.PagingMetaData), page =>
       Url.Action("Pipeline",
           new MainViewModel { Page = page, SearchBudget = Model.SearchBudget, SearchExecutive = Model.SearchExecutive,
               SortBy = Model.SortBy }), PagedListRenderOptions.Classic)

        </div>

        <div class="list-group">
            if (Model != null) 
            {
                for (int i = 0; i < Model.Projections.Count; i++)
                {
                    string collapseVar = String.Format("collapse{0}", i);
                    <div class="list-group-item" style="border-width: 4px;border-bottom: ridge;border-bottom-color: aliceblue">
                        <a class="btn btn-toolbar btn-lg" role="button" data-toggle="collapse" href="#collapseVar"
                           aria-expanded="false" aria-controls="collapseVar">
                            <span class="glyphicon glyphicon-option-horizontal"></span>
                        </a>
                        Html.HiddenFor(m => m.Projections[i].Presupuesto, new { id = "Presupuesto" })
                        Html.HiddenFor(m => m.SortBy, new { id = "SortBy" })
                        Html.HiddenFor(m => m.SearchBudget, new { id = "SearchBudget" })
                        Html.HiddenFor(m => m.SearchExecutive, new { id = "SearchExecutive" })
                        Html.HiddenFor(m => m.Projections[i].idLinea, new { id = "idLinea" })
                        | Html.DisplayNameFor(model => model.Projection.Presupuesto) : <b>Html.DisplayFor(m => m.Projections[i].Presupuesto)</b>
                        | Html.DisplayNameFor(model => model.Projection.Cliente) : <b>Html.DisplayFor(m => m.Projections[i].Cliente)</b>
                        | Html.DisplayNameFor(model => model.Projection.Producto) : <b>Html.DisplayFor(m => m.Projections[i].Producto)</b>
                        if (Model.Projections[i].Month != null)
	                    {
		                     foreach (var item in Model.Projections[i].Month)
                             {
                                <span>| <em>item.monthName</em> :
                                <b>item.value</b></span>
                             }
                        }
                        <div class="collapse" id="collapseVar">
                            <div class="well">
                                <div class="table-responsive table-condensed">
                                    <table class="table table-inverse">
                                        <thead class="thead-default">
                                            <tr>
                                                <th>Html.DisplayNameFor(model => model.Projection.Ejecutivo)</th> 
                                                <th>Html.DisplayNameFor(model => model.Projection.Familia)</th> 
                                                <th>Html.DisplayNameFor(model => model.Projection.Sustrato)</th> 
                                                <th>Html.DisplayNameFor(model => model.Projection.ItemCodeSustrato)</th>
                                                <th>Html.DisplayNameFor(model => model.Projection.Gramaje)</th> 
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>Html.DisplayFor(m => m.Projections[i].Ejecutivo)</td>
                                                <td>Html.DisplayFor(m => m.Projections[i].Familia)</td>
                                                <td>Html.DisplayFor(m => m.Projections[i].Sustrato)</td>
                                                <th>Html.DisplayFor(m => m.Projections[i].ItemCodeSustrato)</th>
                                                <td>Html.DisplayFor(m => m.Projections[i].Gramaje)</td>
                                            </tr>
                                        </tbody>
                                        <thead class="thead-default">
                                            <tr>
                                                <th>Html.DisplayNameFor(model => model.Projection.Ancho_Bobina)</th> 
                                                <th>Html.DisplayNameFor(model => model.Projection.Ancho_Pliego)</th> 
                                                <th>Html.DisplayNameFor(model => model.Projection.Largo_Pliego)</th> 
                                                <th>Html.DisplayNameFor(model => model.Projection.Paginas)</th> 
                                                <th>Html.DisplayNameFor(model => model.Projection.Montaje)</th>
                                                <th>Html.DisplayNameFor(model => model.Projection.Pliegos)</th> 
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>Html.DisplayFor(m => m.Projections[i].Ancho_Bobina)</td>
                                                <td>Html.DisplayFor(m => m.Projections[i].Ancho_Pliego)</td>
                                                <td>Html.DisplayFor(m => m.Projections[i].Largo_Pliego)</td>
                                                <td>Html.DisplayFor(m => m.Projections[i].Paginas)</td>
                                                <td>Html.DisplayFor(m => m.Projections[i].Montaje)</td>
                                                <td>Html.DisplayFor(m => m.Projections[i].Pliegos)</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

    <div>
        <span class="BlackText">
            Página (Model.PagingMetaData.PageCount < Model.PagingMetaData.PageNumber ? 0 : Model.PagingMetaData.PageNumber) de 
            Model.PagingMetaData.PageCount
        </span>
        Html.PagedListPager(new StaticPagedList<ProjectionViewModel>(Model.Projections, Model.PagingMetaData), 
       page => Url.Action("Pipeline", new MainViewModel { Page = page, SearchBudget = Model.SearchBudget, SearchExecutive = 
       Model.SearchExecutive, SortBy = Model.SortBy }), PagedListRenderOptions.Classic)

    </div>
  -->